// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/* --- App models --- */

model Project {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  audioFiles AudioFile[]
  labels     Label[]
}

model AudioFile {
  id           String    @id @default(cuid())
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id])
  originalName String    @unique
  uri          String
  durationS    Float?
  sampleRate   Int?
  recordedAt   DateTime?
  site         String?
  unitId       String?
  extension    String?
  createdAt    DateTime  @default(now())
  segments     Segment[]

  @@index([projectId])
  @@index([recordedAt])
}

model Label {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  name      String
  color     String?
  hotkey    String?

  // relation back to segments
  segments  Segment[]

  @@unique([projectId, name])
  @@index([projectId])
}

model Segment {
  id         String    @id @default(cuid())
  audioId    String
  audio      AudioFile @relation(fields: [audioId], references: [id])
  startS     Float
  endS       Float
  labelId    String
  label      Label     @relation(fields: [labelId], references: [id])
  confidence Float?
  notes      String?

  // custom annotation fields
  individuals Int?
  callingRate Float?
  quality     String?

  // ðŸ”¹ audit: who created/updated this segment
  createdById String
  createdBy   User     @relation("SegmentCreatedBy", fields: [createdById], references: [id])

  updatedById String?
  updatedBy   User?    @relation("SegmentUpdatedBy", fields: [updatedById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([audioId, startS])
  @@index([labelId])
  @@index([createdById])
  @@index([updatedById])
}

/* --- NextAuth models (v4) --- */

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("pending")

  accounts      Account[]
  sessions      Session[]

  // ðŸ”¹ back-relations for audit fields
  createdSegments Segment[] @relation("SegmentCreatedBy")
  updatedSegments Segment[] @relation("SegmentUpdatedBy")
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String

  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
